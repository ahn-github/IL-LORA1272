


package com.ifroglab.lora;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import com.fazecast.jSerialComm.SerialPort;

//import gnu.io.*;
//An AWT program inherits from the top-level container java.awt.Frame
public class ifroglablora extends Frame implements ActionListener {
		
	private Frame mainFrame;       // GUI Frame
	private Label labelMessage;    // Declare a Label component 
	private Label labelLoRaStatus;    // Declare a Label component 
	private TextField tfCount; // Declare a TextField component 
	private Button btnCount;   // Declare a Button component
	private int count = 0;     // Counter's value
	
	// LoRa 相關變數
	private loralib mloralib;
	private ArrayList<String> mLoRaSerialPortString; //找到的LoRa Com Port 位置
	private String mDeviceID;   // 現在開啟的LoRa設備名稱
	private byte Freq1=0x01;
	private byte Freq2=0x65;
	private byte Freq3=0x6c;
	private byte Power=0x3;  //{ TXRX,0x01,0x65,0x6c,0x3); 
	private long mCounter;

	
	// UI
	private  Choice mUIComPortName; //Step 1  Com 設備列表
	private  int tUITop=30;
	private  TextArea recevieText;  //顯示接收得資料
	private  TextArea sendText;     //顯示送出的資料
	//private  Label headerLabel;
	
	// 多國語言
	private String mStr[][]={
			  {"Step1:","步驟 1:"},
			  {"Select iFrogLab LoRa Com Port","iFrogLab LoRa 設備"},
			  {"refresh:","尋找此機器LoRa設備"},
			  {"Searching:","搜尋中LoRa"},
			  {"Done:","完成"},
			  {"Step2:","步驟 2:"},  //5
			  {"Setup LoRa device","設定LoRa設備"},  
			  {"Stauts: ","設備狀態:"},  
			  {"No LoRa Device","沒有LoRa設備"},  
			  {"MAC Address:","MAC 地址："},
			  {"Fireware Version:","韌體版本:"}, //10
			  {"Broadcast","廣播Broadcast"},
			  {"Node (Client)","節點端 Node"},
			  {"Gateway (Server)","伺服器端 Gateway"},
			  {"Preferences...","更多設定"},
			  {"Step3:","步驟 3:"},  //15
			  {"",""},
			  {"",""},
			  {"",""},
			  {"Send data","傳送的資料"}, 
			  {"Send","送出"},  //20
			  {"LoRa Device Selected: ","LoRa設備被選取:"}, 
			  {"LoRa Device Setup to: ","LoRa設備被設定為:"}, 
			  {"Open LoRa Device: ","LoRa設備連接中:"}, 
			  {"Open LoRa","啟動LoRa"},
			  {"Close LoRa","關閉LoRa"}, //25
			  {"Turn On LoRa ID ","使用中LoRa設備編號"},
			  {"LoRa Turn Close","LoRa未啟動"},
			  {"",""},
			  {"",""},
			  {"",""},  //30
			  {"Clear","清除"},  
			  {"Receive data ","收到的資料"},  
			  {"Hex (0x00 to 0xff) for E.g 0x01,0x0a","16進位數字 (0x00 to 0xff) 例如：0x01,0x0a"}, 
			  {"Decimal (0-255) E.g:1,2,255 　","10進位 (0-255)  例如: 1,2,255 "},
			  {"Text (UTF-8):","UTF-8  文字"},   //35
			  {"File:","檔案"}, 
			  {"",""},
			  {"",""},
			  {"",""},
			  {"English","English"}, //40
			  {"Traditional Chinese","繁體中文"}, 
			  {"Send a lot of data","送大量資料"}, 
			  
			  
	};
	private int lan=1;
	
	
	@SuppressWarnings("deprecation")
	public ifroglablora () {
	   // 內定值設定
	   mDeviceID="";
	   // Begin 01, 設定主畫面UI
	   mainFrame= new Frame();  
	   //mainFrame.setSize(600,650); 
	   mainFrame = new Frame("iFrogLab LoRa Application");
	   //mainFrame.setSize(400,420);
	   mainFrame.addWindowListener(new WindowAdapter() {         // 關閉按鈕
	       public void windowClosing(WindowEvent windowEvent){
	    	   if(mloralib!=null){  mloralib.FunLora_close(); }
	          System.exit(0);
	       }        
	   });
	   mainFrame.setSize(600,450);  
	   mainFrame.setMinimumSize(new Dimension(600,450));
	   mainFrame.setMaximumSize(new Dimension(600,450));
	   
	   mainFrame.setLayout(null);  
	   ui_Step1(mainFrame);
	   ui_Step2(mainFrame);
	   ui_Step3(mainFrame);
	   mainFrame.setVisible(true);  
	   mainFrame.addComponentListener(new ComponentListener() {
		    public void componentResized(ComponentEvent e) {  }
			@Override
			public void componentMoved(ComponentEvent e) {}
			@Override
			public void componentShown(ComponentEvent e) {}
			@Override
			public void componentHidden(ComponentEvent e) {}
		});
	   // END 01
	   showMenu(); 											    // 顯示下拉式選單
	}
	// 連接LoRa COM ports 設備
	private void ui_Setp1_OpenComPort(){ 					   	// 連接 LoRa USB COM port 設備
	    if(mLoRaSerialPortString!=null && mLoRaSerialPortString.size()>0){  // 如果有設備的話
			// String data = mStr[22][lan]+ mUIComPortName.getSelectedItem(); //mUIComPortName.getItem(mUIComPortName.getSelectedIndex());
			labelMessage.setText(mStr[23][lan]+ mUIComPortName.getSelectedItem());	 //顯示開設備名稱　LoRa USB COM port
			mloralib.SerialPort_setSerialPort(mUIComPortName.getSelectedItem());     //告訴LoRa Lib要打開的設備LORA Com Port 
	    }
	}
	// 找出LoRa USB COM ports 設備
	private void ui_Setp1_listPorts(){ 					   	    // 找出LoRa USB COM ports 設備
		 labelMessage.setText(mStr[3][lan]); //"Searching"
	     	// 找設備，並且顯示在combo中
     	 try{
		    if(mloralib==null)  mloralib=new loralib();
		    mLoRaSerialPortString=mloralib.serial_allPorts();

	    	mUIComPortName.removeAll();                          // 清除下拉式選單
		    if(mLoRaSerialPortString.size()>0){
		       int i=0;
		       while (i<mLoRaSerialPortString.size()){
		    	   mUIComPortName.add(mLoRaSerialPortString.get(i).toString());            //把COM Port 加上
		    	   i++;
		       }
		    }else{
		 	   mUIComPortName.add(mStr[1][lan]);                 //"No Com Port Devices"
		    }
		    ui_Setp1_OpenComPort(); 					      	// 連接 LoRa USB COM port 設備
         }
         catch ( Exception e1 ){
            e1.printStackTrace();
         }
	}
	public void ui_Step1(Frame mainFrame) {  
	   // Begin 01,                添加Step 1 的文字 "Step1"
	   Label l1 = new Label();
	   l1.setAlignment(Label.LEFT);
	   l1.setText(mStr[0][lan]);    //"Step1"
	   l1.setSize(100,30);
	   mainFrame.add(l1);  
	   l1.setLocation(10, 20+tUITop);
	   // END 01
	
	   // Begin 2,                 添加Step 1 的文字 "Select LoRa device"
	   Label l2 = new Label();
	   l2.setAlignment(Label.LEFT);
	   l2.setText(mStr[1][lan]);     // "Select LoRa device"
	   l2.setSize(120,30);
	   mainFrame.add(l2);  
	   l2.setLocation(10, 40+tUITop);
	   // END 2
	   
	   // Begin 03,               添加Step 1  Com 設備列表 Choice, combo box
	   mUIComPortName=new Choice();  
	   mUIComPortName.setBounds(100,100, 280,30);  
	   mUIComPortName.add(mStr[1][lan]);                   //"No Com Port Devices"
	   mainFrame.add(mUIComPortName);  
	   mUIComPortName.setLocation(125, 25+tUITop+(mUIComPortName.size().height/2));
	   mUIComPortName.addItemListener(new ItemListener(){
			@Override
			public void itemStateChanged(ItemEvent e) {
				// 顯示選取Com port 設備：
				String data = mStr[21][lan]+ mUIComPortName.getItem(mUIComPortName.getSelectedIndex());
				labelMessage.setText(data);	
				ui_Setp1_OpenComPort();                    //連接LoRa COM ports 設備
			}
	   });
	
	   // END 02
	   
	   // Begin 03, 添加Step 1  更新的按鈕 
	   Button refreshButton = new Button(mStr[2][lan]);    //"reflash"
	   refreshButton.setBounds(100,100, 100,30); 
	   mainFrame.add(refreshButton);
	   //mUIComPortName.setBounds(100,100, 150,75); 
	   refreshButton.setLocation(400,25+tUITop+(refreshButton.size().height/2));
	   refreshButton.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
  			ui_Setp1_listPorts();                                  // 找出LoRa USB COM ports 設備
	      }
	   });
	   // END 03
	   // Begin 04,                 添加Step 1 的文字 "狀態ˋ"
	   labelMessage = new Label();
	   labelMessage.setAlignment(Label.LEFT);
	   labelMessage.setText("Status:");     // "Select LoRa device"
	   labelMessage.setSize(mainFrame.size().width-250,25);
	   labelMessage.setBackground(Color.lightGray );
	   mainFrame.add(labelMessage);  
	   labelMessage.setLocation(0, mainFrame.size().height-25+tUITop);
	   // END 4   
	    // Begin 05,                 添加Step 1 的文字 "LoRa 是否打開ˋ"
	   labelLoRaStatus = new Label();
	   labelLoRaStatus.setAlignment(Label.RIGHT);
	   labelLoRaStatus.setText(mStr[27][lan]);     //" LoRa關閉中"
	   labelLoRaStatus.setSize(250,25);
	   labelLoRaStatus.setBackground(Color.lightGray );
	   mainFrame.add(labelLoRaStatus);  
	   labelLoRaStatus.setLocation(mainFrame.size().width-250, mainFrame.size().height-25+tUITop);
	   // END 5   
	   // Begin 5,                 添加Step 1 一條區分線
	   Label lineLabel = new Label();
	   lineLabel.setAlignment(Label.LEFT);
	   lineLabel.setText("");     // "Select LoRa device"
	   lineLabel.setSize(mainFrame.size().width,1);
	   lineLabel.setBackground(Color.lightGray );
	   mainFrame.add(lineLabel);  
	   lineLabel.setLocation(0, 75+tUITop);
	   // END 5
	   // 基本設定
	   ui_Setp1_listPorts();                                  // 找出LoRa USB COM ports 設備
	   
	}
	
		@SuppressWarnings("deprecation")
		public void ui_Step2(Frame mainFrame) {
			  int y=60;
		      // Begin 01,                添加Step 2 的文字 "Step1"
		      Label l1 = new Label();
		      l1.setAlignment(Label.LEFT);
		      l1.setText(mStr[5][lan]);    //"Step1"
		      l1.setSize(100,30);
		      mainFrame.add(l1);  
		      l1.setLocation(10, y+20+tUITop);
		      // END 01
	
		      // Begin 2,                 添加Step 2 的文字 "Select LoRa device"
		      Label l2 = new Label();
		      l2.setAlignment(Label.LEFT);
		      l2.setText(mStr[6][lan]);     // "Select LoRa device"
		      l2.setSize(120,30);
		      mainFrame.add(l2);  
		      l2.setLocation(10, y+40+tUITop);
		      // END 2
		      // Begin 3,                 添加Step 2 的文字 "設備狀態"
		      Label l3 = new Label();
		      l3.setAlignment(Label.LEFT);
		      l3.setText(mStr[7][lan]+mStr[8][lan]);     // "設備狀態"
		      l3.setSize(400,25);
		      mainFrame.add(l3);  
		      l3.setLocation(130, y+20+tUITop);
		      // END 3
		      // Begin 4,                 添加Step 2 的文字 MAC ID:
		      Label l4 = new Label();
		      l4.setAlignment(Label.LEFT);
		      l4.setText(mStr[9][lan]); //"MAC Address:");     // MAC ID:
		      l4.setSize(400,25);
		      mainFrame.add(l4);  
		      l4.setLocation(300, y+40+tUITop);
		      // END 4
		      // Begin 5,                 添加Step 2 的文字 Fireware Version
		      Label l5 = new Label();
		      l5.setAlignment(Label.LEFT);
		      l5.setText(mStr[10][lan]); //"MAC Address:");     // Fireware Version
		      l5.setSize(400,25);
		      mainFrame.add(l5);  
		      l5.setLocation(130, y+40+tUITop);
		      // END 5
		      // Begin 06,               添加Step 2  Com 設備列表
		      final Choice LoRaModeChoice=new Choice();  
		      LoRaModeChoice.setBounds(100,100, 180,30);  
		      LoRaModeChoice.add(mStr[11][lan]);             
		      LoRaModeChoice.add(mStr[12][lan]);             
		      LoRaModeChoice.add(mStr[13][lan]); 
		      mainFrame.add(LoRaModeChoice);  
		      LoRaModeChoice.setLocation(125, y+50+tUITop+(LoRaModeChoice.size().height/2));
		      LoRaModeChoice.addItemListener(new ItemListener(){
				@Override
				public void itemStateChanged(ItemEvent e) {
		            String data =mStr[22][lan]
		            + LoRaModeChoice.getItem(LoRaModeChoice.getSelectedIndex());
		            labelMessage.setText(data);	
				}
		      });
		      // END 06
		      // Begin 07, 添加Step 2  設定的按鈕 
		      Button preferencesButton = new Button(mStr[14][lan]);    //"reflash"
		      preferencesButton.setBounds(100,100, 100,30); 
		      mainFrame.add(preferencesButton);
		      preferencesButton.setLocation(410,y+50+tUITop+(preferencesButton.size().height/2));
		      preferencesButton.addActionListener(new ActionListener() {
		         public void actionPerformed(ActionEvent e) {
		        	 	labelMessage.setText(mStr[12][lan]);  
		         }
		      });
		      // END 07
		      // Begin 08, 添加Step 2  啟動LoRa的按鈕 
		      final Button startButton = new Button(mStr[24][lan]);    //"reflash"
		      startButton.setBounds(100,100, 115,30); 
		      mainFrame.add(startButton);
		      startButton.setLocation(300,y+50+(startButton.size().height/2+tUITop));
		      startButton.addActionListener(new ActionListener() {
		         public void actionPerformed(ActionEvent e) {        // 當按下[步驟2；啟動LoRa 按鍵] 
		        	 if(mDeviceID.length()>0){                 // 如果已經開啟LoRa 設備的話
			        	 labelMessage.setText(mStr[25][lan]); //  按鈕顯示「開啟LoRa」　
			        	 labelLoRaStatus.setText(mStr[27][lan]); //LoRa未開啟
			        	 startButton.setLabel(mStr[24][lan]);
			        //	 mloralib.serial_serialEvent_Close();
			        	 mDeviceID="";
			        	 TreadStop();					  	  // 關閉　LoRa　Reciver 資料
			        	 mloralib.FunLora_close();
		        	 }else{                                   // 如果沒有開啟LoRa 設備的話
			        	 labelMessage.setText(mStr[24][lan]); // 按鈕顯示「關閉LoRa」
			        	 mDeviceID=mloralib.GetDeviceID();
			        	 if(mDeviceID.length()>0){
			        		 startButton.setLabel(mStr[25][lan]);  // 成功的話，就改變按鈕的文字為「關閉LoRa」
				        	 labelLoRaStatus.setText(mStr[26][lan]+mDeviceID); //LoRa使用中
				        	 mloralib.ReadMode(  Freq1, Freq2, Freq3, Power);  //{ TXRX,0x01,0x65,0x6c,0x3);             // 設定LoRa為讀取模式
				        	// mloralib.serial_serialEvent_Open();
				        	 TreadStop();					  	  // 關閉　LoRa　Reciver 資料
				        	 TreadStart();					  	  // 打開　LoRa　Reciver 資料
			        	 }
		        	 }
		         }
		      });
		      // END 08
		      // Begin 10 添加Step 2  LoRa的送資料的測試按鈕 
		      final Button sendAlotOfDatastartButton = new Button(mStr[42][lan]);    //"reflash"
		      sendAlotOfDatastartButton.setBounds(80,100, 115,30); 
		      mainFrame.add(sendAlotOfDatastartButton);
		      sendAlotOfDatastartButton.setLocation(500,y+50+(startButton.size().height/2+tUITop));
		      sendAlotOfDatastartButton.addActionListener(new ActionListener() {
		         public void actionPerformed(ActionEvent e) {        // 當按下[步驟2；啟動LoRa 按鍵] 
		        	 	//TreadStop();					  	  // 關閉　LoRa　Reciver 資料
		        	 	mloralib.WriteMode(  Freq1, Freq2, Freq3, Power);  //{ TXRX,0x01,0x65,0x6c,0x3);             // 設定LoRa為讀取模式
					byte tCounter=0;
		        	 	for(int i=0;i<=5;i++) {
	    		        	   try {
		    		        	 byte[] data={tCounter,2,3,4};
		    		        	 mloralib.FunLora_5_write16bytesArray(data);
		    		        	 tCounter++;
						 TimeUnit.SECONDS.sleep(1);
					   } catch (InterruptedException e1) {
						 e1.printStackTrace();
					   }
					}
		         }
		      });
		      // END 08
		      // Begin 9,                 添加Step 1 一條區分線
		      Label lineLabel = new Label();
		      lineLabel.setAlignment(Label.LEFT);
		      lineLabel.setText("");     // "Select LoRa device"
		      lineLabel.setSize(mainFrame.size().width,1);
		      lineLabel.setBackground(Color.lightGray );
		      mainFrame.add(lineLabel);  
		      lineLabel.setLocation(0, y+100+tUITop);
		      // END 9
		}
		public void ui_Step3(Frame mainFrame) {
			 int y=140;
		     // Begin 01,                添加Step 3 的文字 "Step3"
		     Label l1 = new Label();
		     l1.setAlignment(Label.LEFT);
		     l1.setText(mStr[15][lan]);    //"Step3"
		     l1.setSize(100,25);
		     mainFrame.add(l1);  
		     l1.setLocation(10, y+30+tUITop);
		      // END 01
		      // Begin 2,                 添加Step 3 的文字 "傳送的資料"
		      Label l2 = new Label();
		      l2.setAlignment(Label.LEFT);
		      l2.setText(mStr[19][lan]);     // "傳送的資料"
		      l2.setSize(120,30);
		      mainFrame.add(l2);  
		      l2.setLocation(10, y+50+tUITop);
		      // END 2
		      
		      // Begin 03,               添加Step 3  Text (ASCII)  , Hex  ,File
		      final Choice LoRaModeChoice=new Choice();  
		      LoRaModeChoice.setBounds(100,100, 180,30);  
		      LoRaModeChoice.add(mStr[33][lan]);             
		      LoRaModeChoice.add(mStr[34][lan]);             
		      LoRaModeChoice.add(mStr[35][lan]);             
		      LoRaModeChoice.add(mStr[36][lan]); 
		      mainFrame.add(LoRaModeChoice);  
		      LoRaModeChoice.setLocation(125, y+35+(LoRaModeChoice.size().height/2+tUITop));
		      LoRaModeChoice.addItemListener(new ItemListener(){
				@Override
				public void itemStateChanged(ItemEvent e) {
		            String data = "Setup: " 
		            + LoRaModeChoice.getItem(LoRaModeChoice.getSelectedIndex());
		            labelMessage.setText(data);	
				}
		      });
		      // END 03
		      // Begin 04, 添加Step 3 「送出」的按鈕 
		      Button buttonSend = new Button(mStr[20][lan]);    
		      buttonSend.setBounds(100,100, 120,30); 
		      mainFrame.add(buttonSend);
		      buttonSend.setLocation(300,y+35+(buttonSend.size().height/2+tUITop));
		      buttonSend.addActionListener(new ActionListener() {
		         public void actionPerformed(ActionEvent e) {
		        	 labelMessage.setText(mStr[3][lan]); //"Searching"
		        	 mloralib.WriteMode(Freq1, Freq2, Freq3, Power); 
		        	 // byte[] data={1,2,3,4};
		        	 String tSendTextString=sendText.getText();
		        	 byte[] data = String.getBytes(tSendTextString);
		        	 mloralib.FunLora_5_write16bytesArray(data);
		        	 mloralib.ReadMode(Freq1, Freq2, Freq3, Power); 
		         }
		      });
		      // END 04

		      
		     // Begin 04,                添加Step 3 的文字 "Step1"
		    // Label l2 = new Label();
		     sendText = new TextArea("",5,30);		     
		     sendText.setText(mStr[19][lan]);    //"Step3"
		     sendText.setSize(580,80);
		     mainFrame.add(sendText);  
		     sendText.setLocation(10, y+80+tUITop);
		      // END 04
		     
		     
		     
		     // Begin 03,               添加Step 3  Text (ASCII)  , Hex  ,File
		      final Choice LoRaModeRecevieChoice=new Choice();  
		      LoRaModeRecevieChoice.setBounds(100,100, 180,30);  
		      LoRaModeRecevieChoice.add(mStr[33][lan]);             
		      LoRaModeRecevieChoice.add(mStr[34][lan]);             
		      LoRaModeRecevieChoice.add(mStr[35][lan]);             
		      LoRaModeRecevieChoice.add(mStr[36][lan]); 
		      mainFrame.add(LoRaModeRecevieChoice);  
		      LoRaModeRecevieChoice.setLocation(125, y+160+tUITop);
		      LoRaModeRecevieChoice.addItemListener(new ItemListener(){
				@Override
				public void itemStateChanged(ItemEvent e) {
		            String data = "Recevie: " 
		            + LoRaModeRecevieChoice.getItem(LoRaModeRecevieChoice.getSelectedIndex());
		            labelMessage.setText(data);	
				}
		      });
		      // END 03
		      
		      // Begin 04, 添加Step 3 「清除」的按鈕 
		      Button buttonClear = new Button(mStr[31][lan]);    
		      buttonClear.setBounds(100,100, 120,30); 
		      mainFrame.add(buttonClear);
		      buttonClear.setLocation(300,y+160+tUITop);
		      buttonClear.addActionListener(new ActionListener() {
		         public void actionPerformed(ActionEvent e) {
		        	 	labelMessage.setText(mStr[31][lan]); 
		   		     recevieText.setText("");    // 「清除」 添加Step 3 顯示 接收的資料
		        	    
		         }
		      });
		      // END 04
		      // Begin 2,  添加Step 3 「接收資料」的文字 
		      Label l3 = new Label();
		      l3.setAlignment(Label.LEFT);
		      l3.setText(mStr[32][lan]);     // "Select LoRa device"
		      l3.setSize(120,30);
		      mainFrame.add(l3);  
		      l3.setLocation(10, y+160+tUITop);
		      // END 2
		     // Begin 05,                添加Step 3 顯示 接收的資料
		     // Label l2 = new Label();
		     recevieText = new TextArea("",5,30);
		     recevieText.setText("");    
		     recevieText.setSize(580,80);
		     mainFrame.add(recevieText);  
		     recevieText.setLocation(10, y+190+tUITop);
		      // END 05	     
		      // Begin 05,               添加Step 3  Text (ASCII)  , Hex  ,File
		      Choice taregtDevice=new Choice();  
		      taregtDevice.setBounds(100,100, 180,30);  
		      taregtDevice.add(mStr[16][lan]);             
		      taregtDevice.add(mStr[17][lan]);             
		      taregtDevice.add(mStr[18][lan]); 
		      mainFrame.add(taregtDevice);  
		      taregtDevice.setLocation(415, y+35+(LoRaModeChoice.size().height/2+tUITop));
		      taregtDevice.addItemListener(new ItemListener(){
				@Override
				public void itemStateChanged(ItemEvent e) {
		            String data = "Setup: " 
		            + LoRaModeChoice.getItem(LoRaModeChoice.getSelectedIndex());
		            labelMessage.setText(data);	
				}
		      });
		      // END 05	     
		}
		   //02 begin  menu
		   // 下拉式選
		   private void showMenu(){
		      //create a menu bar
		      final MenuBar menuBar = new MenuBar();

		      //create menus
		      Menu fileMenu = new Menu("File");
		      Menu editMenu = new Menu("Edit"); 
		      final Menu aboutMenu = new Menu("About");
		      
		      //create menu items
		      MenuItem newMenuItem = new MenuItem("New",new MenuShortcut(KeyEvent.VK_N));
		      newMenuItem.setActionCommand("New");
		      MenuItem openMenuItem = new MenuItem("Open");
		      openMenuItem.setActionCommand("Open");
		      MenuItem saveMenuItem = new MenuItem("Save");
		      saveMenuItem.setActionCommand("Save");
		      MenuItem exitMenuItem = new MenuItem("Exit");
		      exitMenuItem.setActionCommand("Exit");
		      MenuItem cutMenuItem = new MenuItem("Cut");
		      cutMenuItem.setActionCommand("Cut");
		      MenuItem copyMenuItem = new MenuItem("Copy");
		      copyMenuItem.setActionCommand("Copy");
		      MenuItem pasteMenuItem = new MenuItem("Paste");
		      pasteMenuItem.setActionCommand("Paste");
		      MenuItem aboutMenuItem = new MenuItem("About");
		      aboutMenuItem.setActionCommand("about");
		      MenuItemListener menuItemListener = new MenuItemListener();
		      newMenuItem.addActionListener(menuItemListener);
		      openMenuItem.addActionListener(menuItemListener);
		      saveMenuItem.addActionListener(menuItemListener);
		      exitMenuItem.addActionListener(menuItemListener);
		      cutMenuItem.addActionListener(menuItemListener);
		      copyMenuItem.addActionListener(menuItemListener);
		      pasteMenuItem.addActionListener(menuItemListener);
		      aboutMenu.addActionListener(menuItemListener);
	          
		      final CheckboxMenuItem showWindowMenu = 
		         new CheckboxMenuItem("Show About", true);
		      showWindowMenu.addItemListener(new ItemListener() {
		         public void itemStateChanged(ItemEvent e) {
		            if(showWindowMenu.getState()){
		               menuBar.add(aboutMenu);
		            }else{
		               menuBar.remove(aboutMenu);
		            }
		         }
		      });

		      //add menu items to menus
		      fileMenu.add(newMenuItem);
		      fileMenu.add(openMenuItem);
		      fileMenu.add(saveMenuItem);
		      fileMenu.addSeparator();
		      fileMenu.add(showWindowMenu);
		      fileMenu.addSeparator();
		      fileMenu.add(exitMenuItem);

		      editMenu.add(cutMenuItem);
		      editMenu.add(copyMenuItem);
		      editMenu.add(pasteMenuItem);
		      
		      aboutMenu.add(aboutMenuItem);

		      //add menu to menubar
		      menuBar.add(fileMenu);
		      menuBar.add(editMenu);
		      menuBar.add(aboutMenu);

		      //add menubar to the frame
		      mainFrame.setMenuBar(menuBar);
		      mainFrame.setVisible(true);  
		   }

		   class MenuItemListener implements ActionListener {
		      public void actionPerformed(ActionEvent e) {            
		    	  labelMessage.setText(e.getActionCommand() 
		            + " MenuItem clicked.");
		      }    
		   }
		   //02 end menu		
	// The entry main() method
		   
		   /*
		   static void listPorts()
		    {
		        java.util.Enumeration<CommPortIdentifier> portEnum = CommPortIdentifier.getPortIdentifiers();
		        while ( portEnum.hasMoreElements() ) 
		        {
		            CommPortIdentifier portIdentifier = portEnum.nextElement();
		            System.out.println(portIdentifier.getName()  +  " - " +  getPortTypeName(portIdentifier.getPortType()) );
		        }        
		    }
		    */
		    /*
		    static String getPortTypeName ( int portType )
		    {
		        switch ( portType )
		        {
		            case CommPortIdentifier.PORT_I2C:
		                return "I2C";
		            case CommPortIdentifier.PORT_PARALLEL:
		                return "Parallel";
		            case CommPortIdentifier.PORT_RAW:
		                return "Raw";
		            case CommPortIdentifier.PORT_RS485:
		                return "RS485";
		            case CommPortIdentifier.PORT_SERIAL:
		                return "Serial";
		            default:
		                return "unknown type";
		        }
		    }
		    */
	private ThreadRecevieText mThreadRecevieText;	
	@SuppressWarnings("deprecation")
	public void TreadStop(){
		if(mThreadRecevieText!=null){
			mThreadRecevieText.stop();
			mThreadRecevieText=null;
		}
	}
	@SuppressWarnings("deprecation")
	public void TreadStart(){
		if(mThreadRecevieText!=null){
			mThreadRecevieText.stop();
			mThreadRecevieText=null;
		}
		
		mThreadRecevieText = new ThreadRecevieText(recevieText,mloralib);
		mThreadRecevieText.start();
		////////////
		/*
		long tCounter=mloralib.FunLora_7_counter_long();
	    System.out.println("tCounter="+Long.toString(tCounter));   
		if(mCounter!=tCounter){
			mCounter=tCounter; 
			for(int i=0;i<100;i++){
				byte[] data=mloralib.FunLora_6_readPureData();
		    	if(data!=null && data.length>4 &&  data[0]==(byte)0xc1 &&    data[1]==(byte)0x86 ){
		    		int len=(int)data[2]-2;  //18
		    		if(data.length==len+6){ // 10  6
		    			// C18612 00 00 00 00 00    00 00 00 55
			    		byte[] data2 = new byte[len];
			    		for(int i2=0;i2<len;i2++){
			    			byte t1=data[3+i2];
			    			data2[i2]=t1;
			    		}
			    	 	String tRecHex=mloralib.FunBytesToHex(data2);
			    	    System.out.println("收到資料COM Port<-"+tRecHex);   
			    	    recevieText.setText(recevieText.getText()+tRecHex+"\n");
		    		}
		    	}
			}
		}
		  
    	*/
		
		///////////
	}
	public static void main(String[] args) {
	   // Invoke the constructor to setup the GUI, by allocating an instance
		ifroglablora app = new ifroglablora();
	      // or simply "new AWTCounter();" for an anonymous instance   
	}
	
	// ActionEvent handler - Called back upon button-click.
	@Override
	public void actionPerformed(ActionEvent evt) {
	   ++count; // Increase the counter value
	   // Display the counter value on the TextField tfCount
	   tfCount.setText(count + ""); // Convert int to String
	}
	/////////////////////////////////////////
/////////////////////////////////////////
	class ThreadRecevieTextRandom extends Thread
	{ 
	  public ThreadRecevieTextRandom(TextArea iComRrecevieText,loralib iloralib)
	  { 
		  mRrecevieText = iComRrecevieText;
	      generator = new Random();
	      threadloralib=iloralib;
	  }

	  public void run()
	  { 
	   try
	   {
	     while (!interrupted())
	     { 
	      int i = Math.abs(generator.nextInt());
	  	  mRrecevieText.setText(new Integer(i).toString()+"\n"+mRrecevieText.getText());
	      sleep(1000);
	      ////////////
	      /*
	      byte[] data=mloralib.FunLora_6_readPureData();
	    	if(data!=null && data.length>4 &&  data[0]==(byte)0xc1 &&    data[1]==(byte)0x86 ){
	    		int len=(int)data[2];
	    		if(data.length<=len+3){
		    		byte[] data2 = new byte[len];
		    		for(int i2=0;i2<len-1;i2++){
		    			data2[i2]=data[3+i2];
		    		}
		    	 //	String tRecHex=mloralib.FunBytesToHex(data2);
		    	 //System.out.println("收到資料COM Port<-"+tRecHex);   
		    	 // 	mRrecevieText.setText(mRrecevieText.getText()+tRecHex+"\n");
	    		}
	    	}
	    	*/
	      ///////////
	      
	      
	     }
	   }
	   catch (InterruptedException exception) {}
	  }

	  // private JComboBox combo;
	  private Random generator;
	  private TextArea mRrecevieText;
	  private loralib threadloralib;
	}

	class ThreadRecevieText2 extends Thread
	{ 
	  public void ThreadRecevieText(TextArea iRecevieText)
	  { 
	    mRrecevieText = iRecevieText;
	    generator = new Random();
	    mCounter=0;
	  }

	  public void run()
	  { 
	     while (!interrupted())
	     {
		    try {
		    	
		   // 	byte[] dataCounter=mloralib.FunLora_7_counter();
	
		   // 	if(dataCounter.length>4 &&  dataCounter[0]==(byte)0xc1 &&    dataCounter[1]==(byte)0x87 ){
		    //		long Counter=(long)dataCounter[3]*(long)0x100+(long)dataCounter[4];
		    //		if(mCounter!=Counter){
		    	    	byte[] data=mloralib.FunLora_6_readPureData();
				    	if(data!=null && data.length>4 &&  data[0]==(byte)0xc1 &&    data[1]==(byte)0x86 ){
				    		int len=(int)data[2];
				    		if(data.length<=len+3){
					    		byte[] data2 = new byte[len];
					    		for(int i=0;i<len-1;i++){
					    			data2[i]=data[3+i];
					    		}
					    		String tRecHex=mloralib.FunBytesToHex(data2);
					    		System.out.println("收到資料COM Port<-"+tRecHex);   
					    	  	mRrecevieText.setText(mRrecevieText.getText()+tRecHex+"\n");
				    		}
				    	}
		    //		}
		    //	}
		    	
				sleep(10);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	  	 
	    	 
	     }
	   
	  }

	  private TextArea mRrecevieText;
	  private Random generator;
	  private long mCounter;
	}
	
	class ThreadRecevieText extends Thread
	{ 
	  public ThreadRecevieText(TextArea iComRrecevieText,loralib iloralib)
	  { 
		  mRrecevieText = iComRrecevieText;
	      generator = new Random();
	      threadloralib=iloralib;
	  }

	  public void run()
	  { 
	   try
	   {
	     while (!interrupted())
	     { 
	    
			long tCounter=mloralib.FunLora_7_counter_long();
		    System.out.println("tCounter="+Long.toString(tCounter));   
			//if(mCounter!=tCounter){
			//	mCounter=tCounter; 
				//for(int i=0;i<100;i++){
	    	          mloralib.ReadMode(Freq1, Freq2, Freq3, Power); 
				  byte[] data=mloralib.FunLora_6_readPureData();
			    	  if(data!=null && data.length>4 &&  data[0]==(byte)0xc1 &&    data[1]==(byte)0x86 ){
			    		int len=(int)data[2]-2;  //18
			    		if(data.length==len+6){ // 10  6
			    			// C18612 00 00 00 00 00    00 00 00 55
				    		byte[] data2 = new byte[len];
				    		for(int i2=0;i2<len;i2++){
				    			byte t1=data[3+i2];
				    			data2[i2]=t1;
				    		}
				    	 	String tRecHex=mloralib.FunBytesToHex(data2);
				    	    System.out.println("收到資料COM Port<-"+tRecHex);   
				    	    recevieText.setText(recevieText.getText()+tRecHex+"\n");
			    		}
			    	  }
				//}

		//	        	 mloralib.WriteMode(Freq1, Freq2, Freq3, Power); 
		//	}
			  

		      //int i = Math.abs(generator.nextInt());
		  	  //mRrecevieText.setText(new Integer(i).toString()+"\n"+mRrecevieText.getText());
		      sleep(1000);
			
			///////////
		
		
	      
	      
	     }
	   }
	   catch (InterruptedException exception) {}
	  }

	  // private JComboBox combo;
	  private Random generator;
	  private TextArea mRrecevieText;
	  private loralib threadloralib;
	}
	
	
	
}
